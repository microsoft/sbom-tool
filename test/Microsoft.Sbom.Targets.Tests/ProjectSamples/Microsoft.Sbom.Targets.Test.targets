<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--This is a copy of the Microsoft.Sbom.Targets.targets file to be used for the ProjectSamples test projects -->

  <PropertyGroup>
    <GenerateSbom_TFM Condition=" '$(MSBuildRuntimeType)' == 'Full' ">net472</GenerateSbom_TFM>
    <GenerateSbom_TFM Condition=" '$(MSBuildRuntimeType)' == 'Core' ">net8.0</GenerateSbom_TFM>

    <SbomToolBinaryOutputPath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory),..,sbom-tool))</SbomToolBinaryOutputPath>
    <AssemblyFilePath>$([System.IO.Path]::Combine($(MSBuildThisFileDirectory),..,Microsoft.Sbom.Targets.dll))</AssemblyFilePath>

    <!--Set the SBOM CLI Tool path. This variable is only used in SbomCLIToolTask.cs-->
    <SbomToolPath Condition=" '$(MSBuildRuntimeType)' == 'Full'">$(SbomToolBinaryOutputPath)</SbomToolPath>
    <ManifestFolderName>_manifest</ManifestFolderName>
    <SbomSpecification>spdx_2.2</SbomSpecification>
  </PropertyGroup>
  
  <!--Based on the MSBuild runtime, GenerateSbom will either pull the GenerateSbomTask or SbomCLIToolTask logic-->
  <UsingTask TaskName="Microsoft.Sbom.Targets.GenerateSbom" AssemblyFile="$(AssemblyFilePath)" />

  <PropertyGroup>
    <GenerateSBOM Condition=" '$(GenerateSBOM)' == '' ">false</GenerateSBOM>
    <SbomGenerationBuildComponentPath Condition=" '$(SbomGenerationBuildComponentPath)' == '' ">$(MSBuildProjectDirectory)</SbomGenerationBuildComponentPath>
    <SbomGenerationPackageSupplier Condition=" '$(SbomGenerationPackageSupplier)' == '' And $(Authors) != '' ">$(Authors)</SbomGenerationPackageSupplier>
    <SbomGenerationPackageSupplier Condition=" '$(SbomGenerationPackageSupplier)' == '' And $(Authors) == '' ">$(AssemblyName)</SbomGenerationPackageSupplier>
    <SbomGenerationPackageName Condition=" '$(SbomGenerationPackageName)' == '' And $(PackageId) != '' ">$(PackageId)</SbomGenerationPackageName>
    <SbomGenerationPackageName Condition=" '$(SbomGenerationPackageName)' == '' And $(PackageId) == '' ">$(AssemblyName)</SbomGenerationPackageName>
    <SbomGenerationPackageVersion Condition=" '$(SbomGenerationPackageVersion)' == '' And $(Version) != '' ">$(Version)</SbomGenerationPackageVersion>
    <SbomGenerationPackageVersion Condition=" '$(SbomGenerationPackageVersion)' == '' And $(Version) == '' ">1.0.0</SbomGenerationPackageVersion>
    <SbomGenerationNamespaceBaseUri Condition=" '$(SbomGenerationNamespaceBaseUri)' == '' ">http://spdx.org/spdxdocs/$(SbomGenerationPackageName)</SbomGenerationNamespaceBaseUri>
    <SbomGenerationFetchLicenseInformation Condition=" '$(SbomGenerationFetchLicenseInformation)' == '' ">false</SbomGenerationFetchLicenseInformation>
    <SbomGenerationEnablePackageMetadataParsing Condition=" '$(SbomGenerationEnablePackageMetadataParsing)' == '' ">false</SbomGenerationEnablePackageMetadataParsing>
    <SbomGenerationVerbosity Condition=" '$(SbomGenerationVerbosity)' == '' ">information</SbomGenerationVerbosity>
    <SbomGenerationManifestInfo Condition=" '$(SbomGenerationManifestInfo)' == '' ">SPDX:2.2</SbomGenerationManifestInfo>
    <SbomGenerationDeleteManifestDirIfPresent Condition=" '$(SbomGenerationDeleteManifestDirIfPresent)' == '' ">true</SbomGenerationDeleteManifestDirIfPresent>
    <UnzipGuid>$([System.Guid]::NewGuid())</UnzipGuid>
  </PropertyGroup>

  <!-- After the Nuget Package is generated, we will unzip, scan, generate the SBOM and zip again. -->
  <Target Name="GenerateSbomTarget" AfterTargets="Pack" Condition=" '$(GenerateSBOM)' ==  'true'" >
    <Message Importance="high" Text="DEBUG MESSAGE: '$(TargetFramework)'. '$(MSBuildRuntimeType)'. '$(SbomToolPath)'. '$(AssemblyFilePath)'" />
    
    <!-- Unzip Nuget package, so it can be scanned by the SBOM Task. -->
    <PropertyGroup>
      <NugetPackage>
        $(PackageOutputPath)\$(PackageId).$(PackageVersion).nupkg
      </NugetPackage>
      <NugetPackageUnzip>
        $(PackageOutputPath)\$(PackageId).$(PackageVersion).$(UnzipGuid).temp
      </NugetPackageUnzip>
    </PropertyGroup>
    <Unzip DestinationFolder="$(NugetPackageUnzip)" SourceFiles="$(NugetPackage)" OverwriteReadOnlyFiles="true" />

    <!-- Call the SBOM Task to generate a SBOM. -->
    <GenerateSbom
        BuildDropPath="$(NugetPackageUnzip)"
        BuildComponentPath="$(SbomGenerationBuildComponentPath)"
        PackageSupplier="$(SbomGenerationPackageSupplier)"
        PackageName="$(SbomGenerationPackageName)"
        PackageVersion="$(SbomGenerationPackageVersion)"
        NamespaceBaseUri="$(SbomGenerationNamespaceBaseUri)"
        NamespaceUriUniquePart="$(SbomGenerationNamespaceUriUniquePart)"
        ExternalDocumentListFile="$(SbomGenerationExternalDocumentReferenceListFile)"
        FetchLicenseInformation="$(SbomGenerationFetchLicenseInformation)"
        EnablePackageMetadataParsing="$(SbomGenerationEnablePackageMetadataParsing)"
        Verbosity="$(SbomGenerationVerbosity)"
        ManifestInfo="$(SbomGenerationManifestInfo)"
        DeleteManifestDirIfPresent="$(SbomGenerationDeleteManifestDirIfPresent)"
        ManifestDirPath="$(SbomGenerationManifestDirPath)"
        SbomToolPath="$(SbomToolPath)">
      <Output TaskParameter="SbomPath" PropertyName="SbomPathResult" />
    </GenerateSbom>
    <Message Importance="High" Text="Task result: $(SbomPathResult)" />

    <!-- Zip the Nuget package back up and delete the temporary unzipped package. -->
    <ZipDirectory SourceDirectory="$(NugetPackageUnzip)" DestinationFile="$(NugetPackage)" Overwrite="true" />
    <RemoveDir Directories="$(NugetPackageUnzip)" ContinueOnError="true" />
  </Target>
</Project>
